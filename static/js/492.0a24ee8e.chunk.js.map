{"version":3,"file":"static/js/492.0a24ee8e.chunk.js","mappings":"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","sources":["Components/GoogleMap.tsx"],"sourcesContent":["import React, {useCallback, useState, useEffect} from 'react';\nimport {\n  AdvancedMarker,\n  AdvancedMarkerProps,\n  APIProvider,\n  InfoWindow,\n  Map,  \n  useAdvancedMarkerRef,\n  AdvancedMarkerAnchorPoint\n} from '@vis.gl/react-google-maps';\nimport { Link } from \"react-router-dom\";\nimport Button from 'react-bootstrap/Button';\n\n\n//Type de l'apiKey en string (ne pas oublier le point d'exclamation final)\nexport const apiKey : string = process.env.REACT_APP_GOOGLE_MAP!;\nexport const apiURL : string = process.env.REACT_APP_API_URL!;\n\nconst GoogleMap = () => {\n  \n  //Récupération des données par l'API en utilisant une promesse\n  useEffect( ()=>{\n    const controller = new AbortController();\n\n    const apiCallMarkers = async () => {\n      try {\n        const apiCallPromise = await fetch(`${apiURL}/api/markers`,     \n          {\n            signal: controller.signal,\n          }\n        );\n        if (!apiCallPromise.ok) \n          throw new Error(\"Pas de connexion réseau\");\n\n        const apiCallObj = await apiCallPromise.json();\n        setMarkerData(apiCallObj);     \n      } catch (error) {\n        if (error instanceof Error) {    // pour typescript\n          if (error.name=== 'AbortError') {\n          // Requête annulée\n          return;\n          }\n          setErrorMessage(\"Impossible de charger les POI. Veuillez réessayer plus tard.\");\n        }       \n      }\n    };\n     apiCallMarkers();   \n      return () => { controller.abort();    \n        };  \n  }, []);\n\n   \nconst [markerData, setMarkerData] = useState([]);  \nconst [selectedId, setSelectedId] = useState<string | null>(null);\nconst [selectedType, setSelectedType] = useState<string | null>(null);\nconst [selectedDetails, setSelectedDetails] = useState<string | null>(null);\nconst [selectedName, setSelectedName] = useState<string | null>(null); \nconst [selectedMarker, setSelectedMarker] =\n  useState<google.maps.marker.AdvancedMarkerElement | null>(null);\nconst [infoWindowShown, setInfoWindowShown] = useState(false);\nconst [showLinks, setShowLinks] = useState(false); \nconst [errorMessage, setErrorMessage] = useState<string | null>(null); // état pour l'erreur du fetch\n\n//Lors du click sur le marker, sélection de l'id, des détails et du nom du marker nécessaire à l'affichage de l'infowindow\nconst onMarkerClick = useCallback(\n  (name: string | null, details: string | null, id: string | null, type: string,  marker ?: google.maps.marker.AdvancedMarkerElement) => {\n    setSelectedId(id);\n    setSelectedDetails(details);\n    setSelectedName(name);\n    setSelectedType(type);\n    \n    if (marker) {\n      setSelectedMarker(marker);       \n    }\n    if (id !== selectedId) {        \n      setInfoWindowShown(true);\n    } else {\n      setInfoWindowShown(isShown => !isShown);\n    }\n  },\n  [selectedId]   \n);\n//Lors d'un click sur la map (autre que sur un marker), vidage des variables , fermeture de l'infowindow\nconst onMapClick = useCallback(() => {\n  setSelectedId(null);\n  setSelectedMarker(null);\n  setInfoWindowShown(false);\n  setSelectedType(null);\n  setSelectedDetails(null);\n  setSelectedName(null);\n}, []);\n//Fermeture de l'infowindow lorsqu'on click sur la croix de fermeture\nconst handleInfowindowCloseClick = useCallback(\n  () => setInfoWindowShown(false),\n  []\n);\n//Variables et fonctions pour les checkbox du menu\nconst [sceneChecked, setSceneChecked] =React.useState(true);\nconst handleChangeScene = () => {setSceneChecked(!sceneChecked)};\n\nconst [barChecked, setBarChecked] =React.useState(true);\nconst handleChangeBar = () => {setBarChecked(!barChecked)};\n\nconst [parkChecked, setParkChecked] =React.useState(true);\nconst handleChangePark = () => {setParkChecked(!parkChecked)};\n\nconst [exitChecked, setExitChecked] =React.useState(true);\nconst handleChangeExit = () => {setExitChecked(!exitChecked)};\n\nconst [shopChecked, setShopChecked] =React.useState(true);\nconst handleChangeShop = () => {setShopChecked(!shopChecked)};\n\nconst [wcChecked, setWcChecked] =React.useState(true);\nconst handleChangeWc = () => {setWcChecked(!wcChecked)};\n\nconst [campChecked, setCampChecked] =React.useState(true);\nconst handleChangeCamp = () => {setCampChecked(!campChecked)};\n\nconst handleShowLinks = () => {\n  setShowLinks(!showLinks);    \n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n  return (   \n    <APIProvider apiKey= {apiKey} libraries={['marker']}>\n      <>\n      <div className='backgroundMap' style={{overflow: \"hidden\"}}>        \n                                 \n        <div className=\"btn-group BurgerSituationMap\" data-toggle=\"buttons-checkbox\">                                  \n          <button type=\"button\" className=\"BurgerProg btn btn-default \" onClick={handleShowLinks}>                        \n            <img src={`${process.env.PUBLIC_URL}/assets/parametres-curseurs.png`} alt='burger' width=\"35em\" height= \"35em\"></img>                        \n          </button>                    \n        </div>      \n        \n        {/* Affichage des checkbox du menu  */}\n            \n      <div className='Gmap'>                                   \n        <div className={`  ${showLinks ? \"d-block\" : \"d-none\"} `}>  \n          <div className='d-none d-lg-block'>\n            <div className='ico'> \n              <input type=\"checkbox\" checked={sceneChecked} onChange={handleChangeScene}/>\n              <img src={`${process.env.PUBLIC_URL}/assets/POI/scene.png`} width=\"35em\" height= \"35em\" alt=\"Scène\"/>\n              <input type=\"checkbox\" checked={barChecked} onChange={handleChangeBar}/>\n              <img src={`${process.env.PUBLIC_URL}/assets/POI/cocktail2.png`} width=\"35em\" height= \"35em\" alt=\"bar\"/>\n              <input type=\"checkbox\" checked={parkChecked} onChange={handleChangePark}/>\n              <img src={`${process.env.PUBLIC_URL}/assets/POI/parking.png`} width=\"35em\" height= \"35em\" alt=\"parking\"/>\n              <input type=\"checkbox\" checked={exitChecked} onChange={handleChangeExit}/>\n              <img src={`${process.env.PUBLIC_URL}/assets/POI/entrer.png`} width=\"35em\" height= \"35em\" alt=\"exit\"/>\n              <input type=\"checkbox\" checked={shopChecked} onChange={handleChangeShop}/>\n              <img src={`${process.env.PUBLIC_URL}/assets/POI/boutique.png`} width=\"35em\" height= \"35em\" alt=\"shop\"/>\n              <input type=\"checkbox\" checked={wcChecked} onChange={handleChangeWc}/>\n              <img src={`${process.env.PUBLIC_URL}/assets/POI/toilettes.png`} width=\"35em\" height= \"35em\" alt=\"wc\"/>\n              <input type=\"checkbox\" checked={campChecked} onChange={handleChangeCamp}/>\n              <img src={`${process.env.PUBLIC_URL}/assets/POI/camping.png`} width=\"35em\" height= \"35em\" alt=\"camping\"/>\n            </div>\n          </div> \n          <div className='d-block d-lg-none'>\n            <div > \n              <div className='icoMobile'>\n                <input type=\"checkbox\" checked={sceneChecked} onChange={handleChangeScene}/>\n                <img src={`${process.env.PUBLIC_URL}/assets/POI/scene.png`} width=\"35em\" height= \"35em\" alt=\"Scène\"/>\n                <input type=\"checkbox\" checked={barChecked} onChange={handleChangeBar}/>\n                <img src={`${process.env.PUBLIC_URL}/assets/POI/cocktail2.png`} width=\"35em\" height= \"35em\" alt=\"bar\"/>\n                </div>\n                <div className='icoMobile'>\n                <input type=\"checkbox\" checked={parkChecked} onChange={handleChangePark}/>\n                <img src={`${process.env.PUBLIC_URL}/assets/POI/parking.png`} width=\"35em\" height= \"35em\" alt=\"parking\"/>   \n                <input type=\"checkbox\" checked={exitChecked} onChange={handleChangeExit}/>\n                <img src={`${process.env.PUBLIC_URL}/assets/POI/entrer.png`} width=\"35em\" height= \"35em\" alt=\"exit\"/>\n                </div>\n                <div className='icoMobile'>\n                <input type=\"checkbox\" checked={shopChecked} onChange={handleChangeShop}/>\n                <img src={`${process.env.PUBLIC_URL}/assets/POI/boutique.png`} width=\"35em\" height= \"35em\" alt=\"shop\"/>\n                <input type=\"checkbox\" checked={wcChecked} onChange={handleChangeWc}/>\n                <img src={`${process.env.PUBLIC_URL}/assets/POI/toilettes.png`} width=\"35em\" height= \"35em\" alt=\"wc\"/>\n                <input type=\"checkbox\" checked={campChecked} onChange={handleChangeCamp}/>\n                <img src={`${process.env.PUBLIC_URL}/assets/POI/camping.png`} width=\"35em\" height= \"35em\" alt=\"camping\"/>\n              </div>\n            </div>\n          </div>\n        </div>   \n\n        { /* Affichage de l'erreur du fetch si nécessaire */}\n        {errorMessage && (\n          <div style={{ color: \"red\", textAlign: \"center\", margin: \"1em\" }}>\n            {errorMessage}\n          </div>\n        )}\n\n        {/* Affichage de la Map */}\n      <Map\n        mapId=\"d17a67bf932afd78\"\n        maxZoom={20}\n        minZoom={10}\n        defaultZoom={15.477}\n        defaultCenter={{lat: 48.64627130950389,    lng: 1.8125529133067797}}\n        gestureHandling={'auto'}\n        onClick={onMapClick}\n        clickableIcons={false}\n        disableDefaultUI>\n\n            \n       \n        {markerData.map(({id, latitude, longitude, type, zIndex, details, name}) => {  \n                 \n          // Affichage des icones avec condition de \"type\" et de la checkbox activée  \n          if (type === \"scene\" && sceneChecked )            \n            return (              \n              <React.Fragment >                          \n                <AdvancedMarkerWithRef                  \n                  onMarkerClick={(\n                    marker: google.maps.marker.AdvancedMarkerElement\n                  ) => onMarkerClick(name,details,id,type, marker)}                        \n                  position={{lat: parseFloat( latitude ),lng: parseFloat( longitude )}}\n                  anchorPoint={AdvancedMarkerAnchorPoint['CENTER']}\n                  zIndex={zIndex}>\n                  <img src={`${process.env.PUBLIC_URL}/assets/POI/scene.png`} width={45} height={45} alt=\"scene\"/>                                     \n                </AdvancedMarkerWithRef>\n              </React.Fragment>\n            );\n          \n\n          if (type === 'bar' && barChecked) \n            return (                  \n              <React.Fragment >                 \n                <AdvancedMarkerWithRef\n                  onMarkerClick={(\n                    marker: google.maps.marker.AdvancedMarkerElement\n                  ) => onMarkerClick(name,details,id,type, marker)}                        \n                  position={{lat: parseFloat( latitude ),lng: parseFloat( longitude )}}\n                  anchorPoint={AdvancedMarkerAnchorPoint['CENTER']}\n                  zIndex={zIndex}>\n                  <img src={`${process.env.PUBLIC_URL}/assets/POI/cocktail2.png`} width={40} height={40} alt=\"bar\"/>                  \n                </AdvancedMarkerWithRef>\n              </React.Fragment>\n            );\n          \n\n          if (type === 'parking' && parkChecked) \n            return (                  \n              <React.Fragment >                 \n                <AdvancedMarkerWithRef\n                  onMarkerClick={(\n                    marker: google.maps.marker.AdvancedMarkerElement\n                  ) => onMarkerClick(name,details,id,type, marker)}                        \n                  position={{lat: parseFloat( latitude ),lng: parseFloat( longitude )}}\n                  anchorPoint={AdvancedMarkerAnchorPoint['CENTER']}\n                  zIndex={zIndex}>\n                  <img src={`${process.env.PUBLIC_URL}/assets/POI/parking.png`} width={30} height={30} alt=\"parking\"/>                  \n                </AdvancedMarkerWithRef>\n              </React.Fragment>\n            );\n          \n\n          if (type === 'door' && exitChecked) \n            return (                  \n              <React.Fragment >                 \n                <AdvancedMarkerWithRef\n                  onMarkerClick={(\n                    marker: google.maps.marker.AdvancedMarkerElement\n                  ) => onMarkerClick(name,details,id,type, marker)}                        \n                  position={{lat: parseFloat( latitude ),lng: parseFloat( longitude )}}\n                  anchorPoint={AdvancedMarkerAnchorPoint['CENTER']}\n                  zIndex={zIndex}>\n                  <img src={`${process.env.PUBLIC_URL}/assets/POI/entrer.png`} width={30} height={30} alt=\"exit\"/>                  \n                </AdvancedMarkerWithRef>\n              </React.Fragment>\n            );\n          \n\n          if (type === 'shop' && shopChecked) \n            return (                  \n              <React.Fragment >                 \n                <AdvancedMarkerWithRef\n                  onMarkerClick={(\n                    marker: google.maps.marker.AdvancedMarkerElement\n                  ) => onMarkerClick(name,details,id,type, marker)}                        \n                  position={{lat: parseFloat( latitude ),lng: parseFloat( longitude )}}\n                  anchorPoint={AdvancedMarkerAnchorPoint['CENTER']}\n                  zIndex={zIndex}>\n                  <img src={`${process.env.PUBLIC_URL}/assets/POI/boutique.png`} width={30} height={30} alt=\"shop\"/>                  \n                </AdvancedMarkerWithRef>\n              </React.Fragment>\n            );\n          \n\n          if (type === 'wc' && wcChecked) \n            return (                  \n              <React.Fragment >                 \n                <AdvancedMarkerWithRef\n                  onMarkerClick={(\n                    marker: google.maps.marker.AdvancedMarkerElement\n                  ) => onMarkerClick(name,details,id,type, marker)}                        \n                  position={{lat: parseFloat( latitude ),lng: parseFloat( longitude )}}\n                  anchorPoint={AdvancedMarkerAnchorPoint['CENTER']}\n                  zIndex={zIndex}>\n                  <img src={`${process.env.PUBLIC_URL}/assets/POI/toilettes.png`} width={30} height={30} alt=\"wc\"/>                  \n                </AdvancedMarkerWithRef>\n              </React.Fragment>\n            );\n          \n\n          if (type === 'camping' && campChecked) \n            return (                  \n              <React.Fragment >                 \n                <AdvancedMarkerWithRef\n                  onMarkerClick={(\n                    marker: google.maps.marker.AdvancedMarkerElement\n                  ) => onMarkerClick(name,details,id,type, marker)}                        \n                  position={{lat: parseFloat( latitude ),lng: parseFloat( longitude )}}\n                  anchorPoint={AdvancedMarkerAnchorPoint['CENTER']}\n                  zIndex={zIndex}>\n                  <img src={`${process.env.PUBLIC_URL}/assets/POI/camping.png`} width={30} height={30} alt=\"wc\"/>                  \n                </AdvancedMarkerWithRef>\n              </React.Fragment>\n            );\n            \n          return (null)\n           \n        }\n        )}\n          \n         {/* condition d'affichage et contenu de l'infowindow  */}\n\n         {infoWindowShown && selectedMarker && selectedType === \"scene\" && (\n         \n          <InfoWindow          \n            anchor={selectedMarker}\n            pixelOffset={[0, 0]}\n            onCloseClick={handleInfowindowCloseClick}>\n            <h4>{selectedName}</h4>\n            <p>{selectedDetails}</p>  \n            <Link to= \"/Programmation\">            \n              <Button className=\"checkRGPDLink\" variant=\"link\">Voir le programme</Button>\n            </Link>   \n          </InfoWindow>\n          )}\n        \n        {infoWindowShown && selectedMarker  && (selectedType === \"camping\" || selectedType === \"parking\" || selectedType === \"door\" ) && (\n         \n          <InfoWindow          \n            anchor={selectedMarker}\n            pixelOffset={[0, 0]}\n            onCloseClick={handleInfowindowCloseClick}>\n            <h4>{selectedName}</h4>\n            <p>{selectedDetails}</p>   \n              <Link to=\"/Informations\">                  \n                <Button className=\"checkRGPDLink\" variant=\"link\">&lsaquo;&lsaquo;Infos&rsaquo;&rsaquo;</Button>\n              </Link>        \n          </InfoWindow>\n          )}\n          \n         {infoWindowShown && selectedMarker  && (selectedType === \"bar\" || selectedType === \"wc\" || selectedType === \"shop\" ) && (\n         \n          <InfoWindow          \n            anchor={selectedMarker}\n            pixelOffset={[0, 0]}\n            onCloseClick={handleInfowindowCloseClick}>\n            <h4>{selectedName}</h4>\n            <p>{selectedDetails}</p>                      \n          </InfoWindow>\n          )}\n        \n      </Map>\n    </div>        \n  </div>\n  </>      \n  </APIProvider>    \n  );  \n};\n\n// Définition du marker \nexport const AdvancedMarkerWithRef = (\n  props: AdvancedMarkerProps & {\n    onMarkerClick: (marker: google.maps.marker.AdvancedMarkerElement) => void;\n  }\n) => {\nconst {children, onMarkerClick, ...advancedMarkerProps} = props;\nconst [markerRef, marker] = useAdvancedMarkerRef();\n\nreturn (\n  <AdvancedMarker\n    onClick={() => {\n      if (marker) {\n        onMarkerClick(marker);\n      }\n    }}\n    ref={markerRef}\n    {...advancedMarkerProps}>\n    {children}\n  </AdvancedMarker>\n  );\n};\n\nexport default GoogleMap;\n\n"],"names":["apiKey","process","apiURL","AdvancedMarkerWithRef","props","children","onMarkerClick","advancedMarkerProps","_objectWithoutProperties","_excluded","markerRef","marker","useAdvancedMarkerRef","_jsx","AdvancedMarker","_objectSpread","onClick","ref","GoogleMap","useEffect","controller","AbortController","async","apiCallPromise","fetch","concat","signal","ok","Error","apiCallObj","json","setMarkerData","error","name","setErrorMessage","apiCallMarkers","abort","markerData","useState","selectedId","setSelectedId","selectedType","setSelectedType","selectedDetails","setSelectedDetails","selectedName","setSelectedName","selectedMarker","setSelectedMarker","infoWindowShown","setInfoWindowShown","showLinks","setShowLinks","errorMessage","useCallback","details","id","type","isShown","onMapClick","handleInfowindowCloseClick","sceneChecked","setSceneChecked","React","handleChangeScene","barChecked","setBarChecked","handleChangeBar","parkChecked","setParkChecked","handleChangePark","exitChecked","setExitChecked","handleChangeExit","shopChecked","setShopChecked","handleChangeShop","wcChecked","setWcChecked","handleChangeWc","campChecked","setCampChecked","handleChangeCamp","APIProvider","libraries","_Fragment","_jsxs","className","style","overflow","handleShowLinks","src","alt","width","height","checked","onChange","color","textAlign","margin","Map","mapId","maxZoom","minZoom","defaultZoom","defaultCenter","lat","lng","gestureHandling","clickableIcons","disableDefaultUI","map","_ref","latitude","longitude","zIndex","position","parseFloat","anchorPoint","AdvancedMarkerAnchorPoint","InfoWindow","anchor","pixelOffset","onCloseClick","Link","to","Button","variant"],"sourceRoot":""}